/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITrueLenderInterface extends ethers.utils.Interface {
  functions: {
    "distribute(address,uint256,uint256)": FunctionFragment;
    "value()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;

  events: {};
}

export class ITrueLender extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITrueLenderInterface;

  functions: {
    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    value(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "value()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  distribute(
    recipient: string,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distribute(address,uint256,uint256)"(
    recipient: string,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  "value()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "value()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
