/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockHook } from "./MockHook";

export class MockHookFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MockHook> {
    return super.deploy(overrides || {}) as Promise<MockHook>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockHook {
    return super.attach(address) as MockHook;
  }
  connect(signer: Signer): MockHookFactory {
    return super.connect(signer) as MockHookFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockHook {
    return new Contract(address, _abi, signerOrProvider) as MockHook;
  }
}

const _abi = [
  {
    inputs: [],
    name: "hook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80637f5a7c7b14602d575b600080fd5b60336035565b005b60005b6064811015607b57600080546001818101835591805291017f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091018190556038565b5056fea264697066735822122099acea7db2bc391902241badc9953f8fafe07a4d6559d8377bd39e049213115164736f6c634300060a0033";
