/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LoanFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createLoanToken(address,uint256,uint256,uint256)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isLoanToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createLoanToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isLoanToken", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createLoanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLoanToken",
    data: BytesLike
  ): Result;

  events: {
    "LoanTokenCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoanTokenCreated"): EventFragment;
}

export class LoanFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LoanFactoryInterface;

  functions: {
    createLoanToken(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createLoanToken(address,uint256,uint256,uint256)"(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currencyToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "currencyToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      _currencyToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _currencyToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isLoanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  createLoanToken(
    _borrower: string,
    _amount: BigNumberish,
    _term: BigNumberish,
    _apy: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createLoanToken(address,uint256,uint256,uint256)"(
    _borrower: string,
    _amount: BigNumberish,
    _term: BigNumberish,
    _apy: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  "currencyToken()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _currencyToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _currencyToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isLoanToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isLoanToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createLoanToken(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createLoanToken(address,uint256,uint256,uint256)"(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    "currencyToken()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _currencyToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _currencyToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isLoanToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    LoanTokenCreated(contractAddress: null): EventFilter;
  };

  estimateGas: {
    createLoanToken(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createLoanToken(address,uint256,uint256,uint256)"(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _currencyToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _currencyToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isLoanToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createLoanToken(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createLoanToken(address,uint256,uint256,uint256)"(
      _borrower: string,
      _amount: BigNumberish,
      _term: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _currencyToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _currencyToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isLoanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLoanToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
