/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TrueGoldControllerInterface extends ethers.utils.Interface {
  functions: {
    "IS_MINT_PAUSER()": FunctionFragment;
    "IS_MINT_RATIFIER()": FunctionFragment;
    "MULTISIG_MINT_SIGS()": FunctionFragment;
    "PAUSED_IMPLEMENTATION()": FunctionFragment;
    "RATIFY_MINT_SIGS()": FunctionFragment;
    "canFinalize(uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "claimTokenProxyOwnership()": FunctionFragment;
    "fastPause()": FunctionFragment;
    "finalizeMint(uint256)": FunctionFragment;
    "hasEnoughApproval(uint256,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initialized()": FunctionFragment;
    "instantMint(address,uint256)": FunctionFragment;
    "instantMintLimit()": FunctionFragment;
    "instantMintPool()": FunctionFragment;
    "instantMintThreshold()": FunctionFragment;
    "invalidateAllPendingMints()": FunctionFragment;
    "mintKey()": FunctionFragment;
    "mintOperationCount()": FunctionFragment;
    "mintOperations(uint256)": FunctionFragment;
    "mintPaused()": FunctionFragment;
    "mintReqInvalidBeforeThisBlock()": FunctionFragment;
    "multiSigMintLimit()": FunctionFragment;
    "multiSigMintPool()": FunctionFragment;
    "multiSigMintThreshold()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseMint(uint256)": FunctionFragment;
    "pauseMints()": FunctionFragment;
    "pauseToken()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "ratifiedMintLimit()": FunctionFragment;
    "ratifiedMintPool()": FunctionFragment;
    "ratifiedMintThreshold()": FunctionFragment;
    "ratifiedPoolRefillApprovals(uint256)": FunctionFragment;
    "ratifyMint(uint256,address,uint256)": FunctionFragment;
    "reclaimEther(address)": FunctionFragment;
    "reclaimToken(address,address)": FunctionFragment;
    "refillInstantMintPool()": FunctionFragment;
    "refillMultiSigMintPool()": FunctionFragment;
    "refillRatifiedMintPool()": FunctionFragment;
    "registry()": FunctionFragment;
    "requestMint(address,uint256)": FunctionFragment;
    "requestReclaimContract(address)": FunctionFragment;
    "requestReclaimEther()": FunctionFragment;
    "requestReclaimToken(address)": FunctionFragment;
    "revokeMint(uint256)": FunctionFragment;
    "setBurnBounds(uint256,uint256)": FunctionFragment;
    "setFastPause(address)": FunctionFragment;
    "setMintLimits(uint256,uint256,uint256)": FunctionFragment;
    "setMintThresholds(uint256,uint256,uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "token()": FunctionFragment;
    "transferChild(address,address)": FunctionFragment;
    "transferMintKey(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokenProxyOwnership(address)": FunctionFragment;
    "unpauseMint(uint256)": FunctionFragment;
    "unpauseMints()": FunctionFragment;
    "upgradeTokenProxyImplTo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "IS_MINT_PAUSER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_MINT_RATIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTISIG_MINT_SIGS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSED_IMPLEMENTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATIFY_MINT_SIGS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canFinalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenProxyOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fastPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEnoughApproval",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instantMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instantMintLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instantMintPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instantMintThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateAllPendingMints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintOperationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintOperations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintReqInvalidBeforeThisBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigMintLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigMintPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigMintThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseMints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ratifiedMintLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ratifiedMintPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ratifiedMintThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ratifiedPoolRefillApprovals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ratifyMint",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimEther",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refillInstantMintPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refillMultiSigMintPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refillRatifiedMintPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReclaimContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReclaimEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestReclaimToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnBounds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFastPause",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintLimits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintThresholds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferChild",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMintKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenProxyOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseMints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTokenProxyImplTo",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "IS_MINT_PAUSER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_MINT_RATIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTISIG_MINT_SIGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSED_IMPLEMENTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATIFY_MINT_SIGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFinalize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenProxyOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fastPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEnoughApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantMintThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateAllPendingMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintOperationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintReqInvalidBeforeThisBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigMintThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseMints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratifiedMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratifiedMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratifiedMintThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratifiedPoolRefillApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ratifyMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refillInstantMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refillMultiSigMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refillRatifiedMintPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReclaimContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReclaimEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReclaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFastPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMintKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenProxyOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTokenProxyImplTo",
    data: BytesLike
  ): Result;

  events: {
    "AllMintsPaused(bool)": EventFragment;
    "FastPauseSet(address)": EventFragment;
    "FinalizeMint(address,uint256,uint256,address)": EventFragment;
    "InstantMint(address,uint256,address)": EventFragment;
    "InstantPoolRefilled()": EventFragment;
    "MintLimitsChanged(uint256,uint256,uint256)": EventFragment;
    "MintPaused(uint256,bool)": EventFragment;
    "MintRatified(uint256,address)": EventFragment;
    "MintThresholdChanged(uint256,uint256,uint256)": EventFragment;
    "MultiSigPoolRefilled()": EventFragment;
    "NewOwnerPending(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RatifyPoolRefilled()": EventFragment;
    "ReclaimContract(address)": EventFragment;
    "RequestMint(address,uint256,uint256,address)": EventFragment;
    "RevokeMint(uint256)": EventFragment;
    "SetRegistry(address)": EventFragment;
    "SetToken(address)": EventFragment;
    "TransferChild(address,address)": EventFragment;
    "TransferMintKey(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllMintsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FastPauseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizeMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantPoolRefilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintRatified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiSigPoolRefilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwnerPending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatifyPoolRefilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReclaimContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRegistry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferChild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferMintKey"): EventFragment;
}

export class TrueGoldController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TrueGoldControllerInterface;

  functions: {
    IS_MINT_PAUSER(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "IS_MINT_PAUSER()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    IS_MINT_RATIFIER(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "IS_MINT_RATIFIER()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MULTISIG_MINT_SIGS(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "MULTISIG_MINT_SIGS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    PAUSED_IMPLEMENTATION(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "PAUSED_IMPLEMENTATION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    RATIFY_MINT_SIGS(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "RATIFY_MINT_SIGS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    canFinalize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canFinalize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimTokenProxyOwnership(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimTokenProxyOwnership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fastPause(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "fastPause()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    finalizeMint(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeMint(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasEnoughApproval(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasEnoughApproval(uint256,uint256)"(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialized(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "initialized()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    instantMint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "instantMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    instantMintLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "instantMintLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    instantMintPool(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "instantMintPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    instantMintThreshold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "instantMintThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    invalidateAllPendingMints(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "invalidateAllPendingMints()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintKey(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "mintKey()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    mintOperationCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mintOperationCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mintOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      value: BigNumber;
      requestedBlock: BigNumber;
      numberOfApproval: BigNumber;
      paused: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    "mintOperations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      value: BigNumber;
      requestedBlock: BigNumber;
      numberOfApproval: BigNumber;
      paused: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    mintPaused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "mintPaused()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mintReqInvalidBeforeThisBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mintReqInvalidBeforeThisBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    multiSigMintLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "multiSigMintLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    multiSigMintPool(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "multiSigMintPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    multiSigMintThreshold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "multiSigMintThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pauseMint(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pauseMints(overrides?: Overrides): Promise<ContractTransaction>;

    "pauseMints()"(overrides?: Overrides): Promise<ContractTransaction>;

    pauseToken(overrides?: Overrides): Promise<ContractTransaction>;

    "pauseToken()"(overrides?: Overrides): Promise<ContractTransaction>;

    pendingOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pendingOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ratifiedMintLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ratifiedMintLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ratifiedMintPool(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ratifiedMintPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ratifiedMintThreshold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ratifiedMintThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ratifiedPoolRefillApprovals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ratifiedPoolRefillApprovals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ratifyMint(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ratifyMint(uint256,address,uint256)"(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reclaimEther(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reclaimToken(
      _token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reclaimToken(address,address)"(
      _token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refillInstantMintPool(overrides?: Overrides): Promise<ContractTransaction>;

    "refillInstantMintPool()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refillMultiSigMintPool(overrides?: Overrides): Promise<ContractTransaction>;

    "refillMultiSigMintPool()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refillRatifiedMintPool(overrides?: Overrides): Promise<ContractTransaction>;

    "refillRatifiedMintPool()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "registry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    requestMint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestReclaimContract(
      _other: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestReclaimContract(address)"(
      _other: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestReclaimEther(overrides?: Overrides): Promise<ContractTransaction>;

    "requestReclaimEther()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestReclaimToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestReclaimToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeMint(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeMint(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBurnBounds(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBurnBounds(uint256,uint256)"(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFastPause(
      _newFastPause: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFastPause(address)"(
      _newFastPause: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMintLimits(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMintLimits(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMintThresholds(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMintThresholds(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setToken(
      _newContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setToken(address)"(
      _newContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferChild(
      _child: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferChild(address,address)"(
      _child: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferMintKey(
      _newMintKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferMintKey(address)"(
      _newMintKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferTokenProxyOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferTokenProxyOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpauseMint(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unpauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpauseMints(overrides?: Overrides): Promise<ContractTransaction>;

    "unpauseMints()"(overrides?: Overrides): Promise<ContractTransaction>;

    upgradeTokenProxyImplTo(
      _implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeTokenProxyImplTo(address)"(
      _implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  IS_MINT_PAUSER(overrides?: CallOverrides): Promise<string>;

  "IS_MINT_PAUSER()"(overrides?: CallOverrides): Promise<string>;

  IS_MINT_RATIFIER(overrides?: CallOverrides): Promise<string>;

  "IS_MINT_RATIFIER()"(overrides?: CallOverrides): Promise<string>;

  MULTISIG_MINT_SIGS(overrides?: CallOverrides): Promise<number>;

  "MULTISIG_MINT_SIGS()"(overrides?: CallOverrides): Promise<number>;

  PAUSED_IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

  "PAUSED_IMPLEMENTATION()"(overrides?: CallOverrides): Promise<string>;

  RATIFY_MINT_SIGS(overrides?: CallOverrides): Promise<number>;

  "RATIFY_MINT_SIGS()"(overrides?: CallOverrides): Promise<number>;

  canFinalize(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canFinalize(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimTokenProxyOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "claimTokenProxyOwnership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fastPause(overrides?: CallOverrides): Promise<string>;

  "fastPause()"(overrides?: CallOverrides): Promise<string>;

  finalizeMint(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeMint(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasEnoughApproval(
    _numberOfApproval: BigNumberish,
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasEnoughApproval(uint256,uint256)"(
    _numberOfApproval: BigNumberish,
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  instantMint(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "instantMint(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  instantMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "instantMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  instantMintPool(overrides?: CallOverrides): Promise<BigNumber>;

  "instantMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  instantMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "instantMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  invalidateAllPendingMints(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "invalidateAllPendingMints()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintKey(overrides?: CallOverrides): Promise<string>;

  "mintKey()"(overrides?: CallOverrides): Promise<string>;

  mintOperationCount(overrides?: CallOverrides): Promise<BigNumber>;

  "mintOperationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintOperations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    to: string;
    value: BigNumber;
    requestedBlock: BigNumber;
    numberOfApproval: BigNumber;
    paused: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
  }>;

  "mintOperations(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    to: string;
    value: BigNumber;
    requestedBlock: BigNumber;
    numberOfApproval: BigNumber;
    paused: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
  }>;

  mintPaused(overrides?: CallOverrides): Promise<boolean>;

  "mintPaused()"(overrides?: CallOverrides): Promise<boolean>;

  mintReqInvalidBeforeThisBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "mintReqInvalidBeforeThisBlock()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multiSigMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "multiSigMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  multiSigMintPool(overrides?: CallOverrides): Promise<BigNumber>;

  "multiSigMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  multiSigMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "multiSigMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pauseMint(
    _opIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pauseMint(uint256)"(
    _opIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pauseMints(overrides?: Overrides): Promise<ContractTransaction>;

  "pauseMints()"(overrides?: Overrides): Promise<ContractTransaction>;

  pauseToken(overrides?: Overrides): Promise<ContractTransaction>;

  "pauseToken()"(overrides?: Overrides): Promise<ContractTransaction>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  ratifiedMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "ratifiedMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  ratifiedMintPool(overrides?: CallOverrides): Promise<BigNumber>;

  "ratifiedMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  ratifiedMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "ratifiedMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  ratifiedPoolRefillApprovals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "ratifiedPoolRefillApprovals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ratifyMint(
    _index: BigNumberish,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ratifyMint(uint256,address,uint256)"(
    _index: BigNumberish,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reclaimEther(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reclaimEther(address)"(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reclaimToken(
    _token: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reclaimToken(address,address)"(
    _token: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refillInstantMintPool(overrides?: Overrides): Promise<ContractTransaction>;

  "refillInstantMintPool()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refillMultiSigMintPool(overrides?: Overrides): Promise<ContractTransaction>;

  "refillMultiSigMintPool()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refillRatifiedMintPool(overrides?: Overrides): Promise<ContractTransaction>;

  "refillRatifiedMintPool()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  requestMint(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestMint(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestReclaimContract(
    _other: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestReclaimContract(address)"(
    _other: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestReclaimEther(overrides?: Overrides): Promise<ContractTransaction>;

  "requestReclaimEther()"(overrides?: Overrides): Promise<ContractTransaction>;

  requestReclaimToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestReclaimToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeMint(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeMint(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBurnBounds(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBurnBounds(uint256,uint256)"(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFastPause(
    _newFastPause: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFastPause(address)"(
    _newFastPause: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMintLimits(
    _instant: BigNumberish,
    _ratified: BigNumberish,
    _multiSig: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMintLimits(uint256,uint256,uint256)"(
    _instant: BigNumberish,
    _ratified: BigNumberish,
    _multiSig: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMintThresholds(
    _instant: BigNumberish,
    _ratified: BigNumberish,
    _multiSig: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMintThresholds(uint256,uint256,uint256)"(
    _instant: BigNumberish,
    _ratified: BigNumberish,
    _multiSig: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegistry(address)"(
    _registry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setToken(
    _newContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setToken(address)"(
    _newContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferChild(
    _child: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferChild(address,address)"(
    _child: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferMintKey(
    _newMintKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferMintKey(address)"(
    _newMintKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferTokenProxyOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferTokenProxyOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpauseMint(
    _opIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unpauseMint(uint256)"(
    _opIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpauseMints(overrides?: Overrides): Promise<ContractTransaction>;

  "unpauseMints()"(overrides?: Overrides): Promise<ContractTransaction>;

  upgradeTokenProxyImplTo(
    _implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeTokenProxyImplTo(address)"(
    _implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_MINT_PAUSER(overrides?: CallOverrides): Promise<string>;

    "IS_MINT_PAUSER()"(overrides?: CallOverrides): Promise<string>;

    IS_MINT_RATIFIER(overrides?: CallOverrides): Promise<string>;

    "IS_MINT_RATIFIER()"(overrides?: CallOverrides): Promise<string>;

    MULTISIG_MINT_SIGS(overrides?: CallOverrides): Promise<number>;

    "MULTISIG_MINT_SIGS()"(overrides?: CallOverrides): Promise<number>;

    PAUSED_IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

    "PAUSED_IMPLEMENTATION()"(overrides?: CallOverrides): Promise<string>;

    RATIFY_MINT_SIGS(overrides?: CallOverrides): Promise<number>;

    "RATIFY_MINT_SIGS()"(overrides?: CallOverrides): Promise<number>;

    canFinalize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canFinalize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    claimTokenProxyOwnership(overrides?: CallOverrides): Promise<void>;

    "claimTokenProxyOwnership()"(overrides?: CallOverrides): Promise<void>;

    fastPause(overrides?: CallOverrides): Promise<string>;

    "fastPause()"(overrides?: CallOverrides): Promise<string>;

    finalizeMint(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeMint(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hasEnoughApproval(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasEnoughApproval(uint256,uint256)"(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    instantMint(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "instantMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    instantMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "instantMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    instantMintPool(overrides?: CallOverrides): Promise<BigNumber>;

    "instantMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    instantMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "instantMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    invalidateAllPendingMints(overrides?: CallOverrides): Promise<void>;

    "invalidateAllPendingMints()"(overrides?: CallOverrides): Promise<void>;

    mintKey(overrides?: CallOverrides): Promise<string>;

    "mintKey()"(overrides?: CallOverrides): Promise<string>;

    mintOperationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintOperationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      value: BigNumber;
      requestedBlock: BigNumber;
      numberOfApproval: BigNumber;
      paused: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    "mintOperations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      value: BigNumber;
      requestedBlock: BigNumber;
      numberOfApproval: BigNumber;
      paused: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    mintPaused(overrides?: CallOverrides): Promise<boolean>;

    "mintPaused()"(overrides?: CallOverrides): Promise<boolean>;

    mintReqInvalidBeforeThisBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintReqInvalidBeforeThisBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSigMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "multiSigMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiSigMintPool(overrides?: CallOverrides): Promise<BigNumber>;

    "multiSigMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiSigMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "multiSigMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pauseMint(_opIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "pauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseMints(overrides?: CallOverrides): Promise<void>;

    "pauseMints()"(overrides?: CallOverrides): Promise<void>;

    pauseToken(overrides?: CallOverrides): Promise<void>;

    "pauseToken()"(overrides?: CallOverrides): Promise<void>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    ratifiedMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "ratifiedMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratifiedMintPool(overrides?: CallOverrides): Promise<BigNumber>;

    "ratifiedMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratifiedMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "ratifiedMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratifiedPoolRefillApprovals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "ratifiedPoolRefillApprovals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ratifyMint(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "ratifyMint(uint256,address,uint256)"(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimEther(_to: string, overrides?: CallOverrides): Promise<void>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimToken(
      _token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "reclaimToken(address,address)"(
      _token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refillInstantMintPool(overrides?: CallOverrides): Promise<void>;

    "refillInstantMintPool()"(overrides?: CallOverrides): Promise<void>;

    refillMultiSigMintPool(overrides?: CallOverrides): Promise<void>;

    "refillMultiSigMintPool()"(overrides?: CallOverrides): Promise<void>;

    refillRatifiedMintPool(overrides?: CallOverrides): Promise<void>;

    "refillRatifiedMintPool()"(overrides?: CallOverrides): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    requestMint(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestReclaimContract(
      _other: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestReclaimContract(address)"(
      _other: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestReclaimEther(overrides?: CallOverrides): Promise<void>;

    "requestReclaimEther()"(overrides?: CallOverrides): Promise<void>;

    requestReclaimToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestReclaimToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMint(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "revokeMint(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurnBounds(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBurnBounds(uint256,uint256)"(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFastPause(
      _newFastPause: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFastPause(address)"(
      _newFastPause: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintLimits(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintLimits(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintThresholds(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintThresholds(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(_newContract: string, overrides?: CallOverrides): Promise<void>;

    "setToken(address)"(
      _newContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferChild(
      _child: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferChild(address,address)"(
      _child: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferMintKey(
      _newMintKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferMintKey(address)"(
      _newMintKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenProxyOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferTokenProxyOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseMint(
      _opIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unpauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseMints(overrides?: CallOverrides): Promise<void>;

    "unpauseMints()"(overrides?: CallOverrides): Promise<void>;

    upgradeTokenProxyImplTo(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTokenProxyImplTo(address)"(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AllMintsPaused(status: null): EventFilter;

    FastPauseSet(_newFastPause: null): EventFilter;

    FinalizeMint(
      to: string | null,
      value: BigNumberish | null,
      opIndex: null,
      mintKey: null
    ): EventFilter;

    InstantMint(
      to: string | null,
      value: BigNumberish | null,
      mintKey: string | null
    ): EventFilter;

    InstantPoolRefilled(): EventFilter;

    MintLimitsChanged(
      instant: null,
      ratified: null,
      multiSig: null
    ): EventFilter;

    MintPaused(opIndex: null, status: null): EventFilter;

    MintRatified(
      opIndex: BigNumberish | null,
      ratifier: string | null
    ): EventFilter;

    MintThresholdChanged(
      instant: null,
      ratified: null,
      multiSig: null
    ): EventFilter;

    MultiSigPoolRefilled(): EventFilter;

    NewOwnerPending(
      currentOwner: string | null,
      pendingOwner: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RatifyPoolRefilled(): EventFilter;

    ReclaimContract(other: string | null): EventFilter;

    RequestMint(
      to: string | null,
      value: BigNumberish | null,
      opIndex: null,
      mintKey: null
    ): EventFilter;

    RevokeMint(opIndex: null): EventFilter;

    SetRegistry(registry: string | null): EventFilter;

    SetToken(newContract: null): EventFilter;

    TransferChild(child: string | null, newOwner: string | null): EventFilter;

    TransferMintKey(
      previousMintKey: string | null,
      newMintKey: string | null
    ): EventFilter;
  };

  estimateGas: {
    IS_MINT_PAUSER(overrides?: CallOverrides): Promise<BigNumber>;

    "IS_MINT_PAUSER()"(overrides?: CallOverrides): Promise<BigNumber>;

    IS_MINT_RATIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    "IS_MINT_RATIFIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    MULTISIG_MINT_SIGS(overrides?: CallOverrides): Promise<BigNumber>;

    "MULTISIG_MINT_SIGS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSED_IMPLEMENTATION(overrides?: CallOverrides): Promise<BigNumber>;

    "PAUSED_IMPLEMENTATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    RATIFY_MINT_SIGS(overrides?: CallOverrides): Promise<BigNumber>;

    "RATIFY_MINT_SIGS()"(overrides?: CallOverrides): Promise<BigNumber>;

    canFinalize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canFinalize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(overrides?: Overrides): Promise<BigNumber>;

    "claimOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    claimTokenProxyOwnership(overrides?: Overrides): Promise<BigNumber>;

    "claimTokenProxyOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    fastPause(overrides?: CallOverrides): Promise<BigNumber>;

    "fastPause()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeMint(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeMint(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasEnoughApproval(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasEnoughApproval(uint256,uint256)"(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    instantMint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "instantMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    instantMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "instantMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    instantMintPool(overrides?: CallOverrides): Promise<BigNumber>;

    "instantMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    instantMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "instantMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    invalidateAllPendingMints(overrides?: Overrides): Promise<BigNumber>;

    "invalidateAllPendingMints()"(overrides?: Overrides): Promise<BigNumber>;

    mintKey(overrides?: CallOverrides): Promise<BigNumber>;

    "mintKey()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintOperationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintOperationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintOperations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "mintPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintReqInvalidBeforeThisBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintReqInvalidBeforeThisBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSigMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "multiSigMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiSigMintPool(overrides?: CallOverrides): Promise<BigNumber>;

    "multiSigMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiSigMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "multiSigMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseMint(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pauseMints(overrides?: Overrides): Promise<BigNumber>;

    "pauseMints()"(overrides?: Overrides): Promise<BigNumber>;

    pauseToken(overrides?: Overrides): Promise<BigNumber>;

    "pauseToken()"(overrides?: Overrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratifiedMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "ratifiedMintLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratifiedMintPool(overrides?: CallOverrides): Promise<BigNumber>;

    "ratifiedMintPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratifiedMintThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "ratifiedMintThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratifiedPoolRefillApprovals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ratifiedPoolRefillApprovals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratifyMint(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ratifyMint(uint256,address,uint256)"(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reclaimEther(_to: string, overrides?: Overrides): Promise<BigNumber>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reclaimToken(
      _token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reclaimToken(address,address)"(
      _token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    refillInstantMintPool(overrides?: Overrides): Promise<BigNumber>;

    "refillInstantMintPool()"(overrides?: Overrides): Promise<BigNumber>;

    refillMultiSigMintPool(overrides?: Overrides): Promise<BigNumber>;

    "refillMultiSigMintPool()"(overrides?: Overrides): Promise<BigNumber>;

    refillRatifiedMintPool(overrides?: Overrides): Promise<BigNumber>;

    "refillRatifiedMintPool()"(overrides?: Overrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestMint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestReclaimContract(
      _other: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestReclaimContract(address)"(
      _other: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestReclaimEther(overrides?: Overrides): Promise<BigNumber>;

    "requestReclaimEther()"(overrides?: Overrides): Promise<BigNumber>;

    requestReclaimToken(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestReclaimToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeMint(_index: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "revokeMint(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBurnBounds(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBurnBounds(uint256,uint256)"(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFastPause(
      _newFastPause: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFastPause(address)"(
      _newFastPause: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMintLimits(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMintLimits(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMintThresholds(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMintThresholds(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegistry(_registry: string, overrides?: Overrides): Promise<BigNumber>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setToken(_newContract: string, overrides?: Overrides): Promise<BigNumber>;

    "setToken(address)"(
      _newContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferChild(
      _child: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferChild(address,address)"(
      _child: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferMintKey(
      _newMintKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferMintKey(address)"(
      _newMintKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferTokenProxyOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferTokenProxyOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpauseMint(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unpauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpauseMints(overrides?: Overrides): Promise<BigNumber>;

    "unpauseMints()"(overrides?: Overrides): Promise<BigNumber>;

    upgradeTokenProxyImplTo(
      _implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeTokenProxyImplTo(address)"(
      _implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_MINT_PAUSER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IS_MINT_PAUSER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IS_MINT_RATIFIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IS_MINT_RATIFIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MULTISIG_MINT_SIGS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MULTISIG_MINT_SIGS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSED_IMPLEMENTATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PAUSED_IMPLEMENTATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RATIFY_MINT_SIGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RATIFY_MINT_SIGS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canFinalize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canFinalize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimTokenProxyOwnership(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimTokenProxyOwnership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fastPause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fastPause()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeMint(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeMint(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasEnoughApproval(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasEnoughApproval(uint256,uint256)"(
      _numberOfApproval: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instantMint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "instantMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    instantMintLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "instantMintLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantMintPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "instantMintPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantMintThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "instantMintThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidateAllPendingMints(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "invalidateAllPendingMints()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintKey()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintOperationCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintOperationCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintOperations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintReqInvalidBeforeThisBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintReqInvalidBeforeThisBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSigMintLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "multiSigMintLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSigMintPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "multiSigMintPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSigMintThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "multiSigMintThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseMint(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pauseMints(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pauseMints()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pauseToken(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pauseToken()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratifiedMintLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ratifiedMintLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratifiedMintPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ratifiedMintPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratifiedMintThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ratifiedMintThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratifiedPoolRefillApprovals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ratifiedPoolRefillApprovals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratifyMint(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ratifyMint(uint256,address,uint256)"(
      _index: BigNumberish,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reclaimEther(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reclaimToken(
      _token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reclaimToken(address,address)"(
      _token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refillInstantMintPool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "refillInstantMintPool()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refillMultiSigMintPool(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "refillMultiSigMintPool()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refillRatifiedMintPool(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "refillRatifiedMintPool()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestMint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestMint(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestReclaimContract(
      _other: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestReclaimContract(address)"(
      _other: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestReclaimEther(overrides?: Overrides): Promise<PopulatedTransaction>;

    "requestReclaimEther()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestReclaimToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestReclaimToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeMint(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeMint(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBurnBounds(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBurnBounds(uint256,uint256)"(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFastPause(
      _newFastPause: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFastPause(address)"(
      _newFastPause: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMintLimits(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMintLimits(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMintThresholds(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMintThresholds(uint256,uint256,uint256)"(
      _instant: BigNumberish,
      _ratified: BigNumberish,
      _multiSig: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setToken(
      _newContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setToken(address)"(
      _newContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferChild(
      _child: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferChild(address,address)"(
      _child: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferMintKey(
      _newMintKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferMintKey(address)"(
      _newMintKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferTokenProxyOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferTokenProxyOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpauseMint(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unpauseMint(uint256)"(
      _opIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpauseMints(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpauseMints()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    upgradeTokenProxyImplTo(
      _implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeTokenProxyImplTo(address)"(
      _implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
