/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITrueDistributorInterface extends ethers.utils.Interface {
  functions: {
    "distribute()": FunctionFragment;
    "empty()": FunctionFragment;
    "farm()": FunctionFragment;
    "nextDistribution()": FunctionFragment;
    "trustToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "empty", values?: undefined): string;
  encodeFunctionData(functionFragment: "farm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "empty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;

  events: {};
}

export class ITrueDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITrueDistributorInterface;

  functions: {
    distribute(overrides?: Overrides): Promise<ContractTransaction>;

    "distribute()"(overrides?: Overrides): Promise<ContractTransaction>;

    empty(overrides?: Overrides): Promise<ContractTransaction>;

    "empty()"(overrides?: Overrides): Promise<ContractTransaction>;

    farm(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "farm()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nextDistribution(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nextDistribution()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    trustToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "trustToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  distribute(overrides?: Overrides): Promise<ContractTransaction>;

  "distribute()"(overrides?: Overrides): Promise<ContractTransaction>;

  empty(overrides?: Overrides): Promise<ContractTransaction>;

  "empty()"(overrides?: Overrides): Promise<ContractTransaction>;

  farm(overrides?: CallOverrides): Promise<string>;

  "farm()"(overrides?: CallOverrides): Promise<string>;

  nextDistribution(overrides?: CallOverrides): Promise<BigNumber>;

  "nextDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;

  trustToken(overrides?: CallOverrides): Promise<string>;

  "trustToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    distribute(overrides?: CallOverrides): Promise<void>;

    "distribute()"(overrides?: CallOverrides): Promise<void>;

    empty(overrides?: CallOverrides): Promise<void>;

    "empty()"(overrides?: CallOverrides): Promise<void>;

    farm(overrides?: CallOverrides): Promise<string>;

    "farm()"(overrides?: CallOverrides): Promise<string>;

    nextDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    "nextDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    trustToken(overrides?: CallOverrides): Promise<string>;

    "trustToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    distribute(overrides?: Overrides): Promise<BigNumber>;

    "distribute()"(overrides?: Overrides): Promise<BigNumber>;

    empty(overrides?: Overrides): Promise<BigNumber>;

    "empty()"(overrides?: Overrides): Promise<BigNumber>;

    farm(overrides?: CallOverrides): Promise<BigNumber>;

    "farm()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    "nextDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    trustToken(overrides?: CallOverrides): Promise<BigNumber>;

    "trustToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    distribute(overrides?: Overrides): Promise<PopulatedTransaction>;

    "distribute()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    empty(overrides?: Overrides): Promise<PopulatedTransaction>;

    "empty()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    farm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextDistribution()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
