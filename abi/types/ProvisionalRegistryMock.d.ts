/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProvisionalRegistryMockInterface extends ethers.utils.Interface {
  functions: {
    "claimOwnership()": FunctionFragment;
    "getAttribute(address,bytes32)": FunctionFragment;
    "getAttributeAdminAddr(address,bytes32)": FunctionFragment;
    "getAttributeTimestamp(address,bytes32)": FunctionFragment;
    "getAttributeValue(address,bytes32)": FunctionFragment;
    "hasAttribute(address,bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "reclaimEther(address)": FunctionFragment;
    "reclaimToken(address,address)": FunctionFragment;
    "requireCanBurn(address)": FunctionFragment;
    "requireCanMint(address)": FunctionFragment;
    "requireCanTransfer(address,address)": FunctionFragment;
    "requireCanTransferFrom(address,address,address)": FunctionFragment;
    "setAttribute(address,bytes32,uint256,bytes32)": FunctionFragment;
    "setAttributeValue(address,bytes32,uint256)": FunctionFragment;
    "subscribe(bytes32,address)": FunctionFragment;
    "subscriberCount(bytes32)": FunctionFragment;
    "syncAttribute(bytes32,uint256,address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsubscribe(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttribute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeAdminAddr",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeTimestamp",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeValue",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAttribute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimEther",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCanBurn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCanMint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCanTransfer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCanTransferFrom",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttribute",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeValue",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncAttribute",
    values: [BytesLike, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeAdminAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCanBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCanMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCanTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCanTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAttribute(address,bytes32,uint256,bytes32,address)": EventFragment;
    "SetManager(address,address)": EventFragment;
    "StartSubscription(bytes32,address)": EventFragment;
    "StopSubscription(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAttribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopSubscription"): EventFragment;
}

export class ProvisionalRegistryMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProvisionalRegistryMockInterface;

  functions: {
    claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    getAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    "getAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    getAttributeAdminAddr(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAttributeAdminAddr(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getAttributeTimestamp(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAttributeTimestamp(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAttributeValue(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAttributeValue(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    hasAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pendingOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reclaimEther(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reclaimToken(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reclaimToken(address,address)"(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requireCanBurn(
      _from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireCanBurn(address)"(
      _from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireCanMint(
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    "requireCanMint(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    requireCanTransfer(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    "requireCanTransfer(address,address)"(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    requireCanTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    "requireCanTransferFrom(address,address,address)"(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    setAttribute(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAttribute(address,bytes32,uint256,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAttributeValue(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAttributeValue(address,bytes32,uint256)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subscribe(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "subscribe(bytes32,address)"(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subscriberCount(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "subscriberCount(bytes32)"(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    syncAttribute(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "syncAttribute(bytes32,uint256,address[])"(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unsubscribe(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsubscribe(bytes32,uint256)"(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  getAttribute(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
  }>;

  "getAttribute(address,bytes32)"(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
  }>;

  getAttributeAdminAddr(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAttributeAdminAddr(address,bytes32)"(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAttributeTimestamp(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAttributeTimestamp(address,bytes32)"(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAttributeValue(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAttributeValue(address,bytes32)"(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasAttribute(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasAttribute(address,bytes32)"(
    _who: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  reclaimEther(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reclaimEther(address)"(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reclaimToken(
    token: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reclaimToken(address,address)"(
    token: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requireCanBurn(_from: string, overrides?: CallOverrides): Promise<void>;

  "requireCanBurn(address)"(
    _from: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireCanMint(
    _to: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
  }>;

  "requireCanMint(address)"(
    _to: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
  }>;

  requireCanTransfer(
    _from: string,
    _to: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
  }>;

  "requireCanTransfer(address,address)"(
    _from: string,
    _to: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
  }>;

  requireCanTransferFrom(
    _sender: string,
    _from: string,
    _to: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
  }>;

  "requireCanTransferFrom(address,address,address)"(
    _sender: string,
    _from: string,
    _to: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
  }>;

  setAttribute(
    _who: string,
    _attribute: BytesLike,
    _value: BigNumberish,
    _notes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAttribute(address,bytes32,uint256,bytes32)"(
    _who: string,
    _attribute: BytesLike,
    _value: BigNumberish,
    _notes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAttributeValue(
    _who: string,
    _attribute: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAttributeValue(address,bytes32,uint256)"(
    _who: string,
    _attribute: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subscribe(
    _attribute: BytesLike,
    _syncer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "subscribe(bytes32,address)"(
    _attribute: BytesLike,
    _syncer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subscriberCount(
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "subscriberCount(bytes32)"(
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  syncAttribute(
    _attribute: BytesLike,
    _startIndex: BigNumberish,
    _addresses: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "syncAttribute(bytes32,uint256,address[])"(
    _attribute: BytesLike,
    _startIndex: BigNumberish,
    _addresses: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unsubscribe(
    _attribute: BytesLike,
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsubscribe(bytes32,uint256)"(
    _attribute: BytesLike,
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    getAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    "getAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    getAttributeAdminAddr(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAttributeAdminAddr(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAttributeTimestamp(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttributeTimestamp(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttributeValue(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttributeValue(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    reclaimEther(_to: string, overrides?: CallOverrides): Promise<void>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimToken(
      token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "reclaimToken(address,address)"(
      token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireCanBurn(_from: string, overrides?: CallOverrides): Promise<void>;

    "requireCanBurn(address)"(
      _from: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireCanMint(
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    "requireCanMint(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    requireCanTransfer(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    "requireCanTransfer(address,address)"(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    requireCanTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    "requireCanTransferFrom(address,address,address)"(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
    }>;

    setAttribute(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAttribute(address,bytes32,uint256,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAttributeValue(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAttributeValue(address,bytes32,uint256)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "subscribe(bytes32,address)"(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriberCount(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subscriberCount(bytes32)"(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncAttribute(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "syncAttribute(bytes32,uint256,address[])"(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsubscribe(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unsubscribe(bytes32,uint256)"(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetAttribute(
      who: string | null,
      attribute: null,
      value: null,
      notes: null,
      adminAddr: string | null
    ): EventFilter;

    SetManager(
      oldManager: string | null,
      newManager: string | null
    ): EventFilter;

    StartSubscription(
      attribute: BytesLike | null,
      subscriber: string | null
    ): EventFilter;

    StopSubscription(
      attribute: BytesLike | null,
      subscriber: string | null
    ): EventFilter;
  };

  estimateGas: {
    claimOwnership(overrides?: Overrides): Promise<BigNumber>;

    "claimOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    getAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttributeAdminAddr(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttributeAdminAddr(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttributeTimestamp(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttributeTimestamp(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttributeValue(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttributeValue(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimEther(_to: string, overrides?: Overrides): Promise<BigNumber>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reclaimToken(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reclaimToken(address,address)"(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requireCanBurn(
      _from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireCanBurn(address)"(
      _from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCanMint(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

    "requireCanMint(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCanTransfer(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireCanTransfer(address,address)"(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCanTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireCanTransferFrom(address,address,address)"(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAttribute(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAttribute(address,bytes32,uint256,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAttributeValue(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAttributeValue(address,bytes32,uint256)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subscribe(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "subscribe(bytes32,address)"(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subscriberCount(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subscriberCount(bytes32)"(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncAttribute(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "syncAttribute(bytes32,uint256,address[])"(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unsubscribe(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsubscribe(bytes32,uint256)"(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttributeAdminAddr(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAttributeAdminAddr(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttributeTimestamp(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAttributeTimestamp(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttributeValue(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAttributeValue(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAttribute(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAttribute(address,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaimEther(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reclaimEther(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reclaimToken(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reclaimToken(address,address)"(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requireCanBurn(
      _from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCanBurn(address)"(
      _from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCanMint(
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCanMint(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCanTransfer(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCanTransfer(address,address)"(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCanTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCanTransferFrom(address,address,address)"(
      _sender: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAttribute(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAttribute(address,bytes32,uint256,bytes32)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      _notes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAttributeValue(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAttributeValue(address,bytes32,uint256)"(
      _who: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "subscribe(bytes32,address)"(
      _attribute: BytesLike,
      _syncer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subscriberCount(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subscriberCount(bytes32)"(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncAttribute(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "syncAttribute(bytes32,uint256,address[])"(
      _attribute: BytesLike,
      _startIndex: BigNumberish,
      _addresses: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsubscribe(bytes32,uint256)"(
      _attribute: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
