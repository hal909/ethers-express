/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITrueRatingAgencyInterface extends ethers.utils.Interface {
  functions: {
    "claim(address,address)": FunctionFragment;
    "getResults(address)": FunctionFragment;
    "no(address,uint256)": FunctionFragment;
    "retract(address)": FunctionFragment;
    "submit(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "yes(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getResults", values: [string]): string;
  encodeFunctionData(
    functionFragment: "no",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "retract", values: [string]): string;
  encodeFunctionData(functionFragment: "submit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yes",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "no", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yes", data: BytesLike): Result;

  events: {};
}

export class ITrueRatingAgency extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITrueRatingAgencyInterface;

  functions: {
    claim(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    retract(id: string, overrides?: Overrides): Promise<ContractTransaction>;

    "retract(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submit(id: string, overrides?: Overrides): Promise<ContractTransaction>;

    "submit(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claim(
    id: string,
    voter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address,address)"(
    id: string,
    voter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getResults(
    id: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getResults(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  no(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "no(address,uint256)"(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  retract(id: string, overrides?: Overrides): Promise<ContractTransaction>;

  "retract(address)"(
    id: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submit(id: string, overrides?: Overrides): Promise<ContractTransaction>;

  "submit(address)"(
    id: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  yes(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "yes(address,uint256)"(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(id: string, voter: string, overrides?: CallOverrides): Promise<void>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retract(id: string, overrides?: CallOverrides): Promise<void>;

    "retract(address)"(id: string, overrides?: CallOverrides): Promise<void>;

    submit(id: string, overrides?: CallOverrides): Promise<void>;

    "submit(address)"(id: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claim(id: string, voter: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getResults(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    retract(id: string, overrides?: Overrides): Promise<BigNumber>;

    "retract(address)"(id: string, overrides?: Overrides): Promise<BigNumber>;

    submit(id: string, overrides?: Overrides): Promise<BigNumber>;

    "submit(address)"(id: string, overrides?: Overrides): Promise<BigNumber>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    retract(id: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "retract(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submit(id: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "submit(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
