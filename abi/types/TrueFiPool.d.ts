/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TrueFiPoolInterface extends ethers.utils.Interface {
  functions: {
    "_currencyToken()": FunctionFragment;
    "_curveGauge()": FunctionFragment;
    "_curvePool()": FunctionFragment;
    "_lender()": FunctionFragment;
    "_minter()": FunctionFragment;
    "_uniRouter()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256,uint256)": FunctionFragment;
    "calcTokenAmount(uint256)": FunctionFragment;
    "calcWithdrawOneCoin(uint256)": FunctionFragment;
    "claimableFees()": FunctionFragment;
    "collectCrv(uint256,address[])": FunctionFragment;
    "collectFees(address)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "flush(uint256,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "join(uint256)": FunctionFragment;
    "joiningFee()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolValue()": FunctionFragment;
    "pull(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "setJoiningFee(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "yTokenBalance()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_curveGauge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_curvePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_lender", values?: undefined): string;
  encodeFunctionData(functionFragment: "_minter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_uniRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcWithdrawOneCoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectCrv",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "collectFees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "flush",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "joiningFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pull",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setJoiningFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yTokenBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_curveGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_curvePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_uniRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcWithdrawOneCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joiningFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setJoiningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yTokenBalance",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(address,uint256,uint256)": EventFragment;
    "Collected(address,uint256)": EventFragment;
    "Exited(address,uint256)": EventFragment;
    "Flushed(uint256)": EventFragment;
    "Joined(address,uint256,uint256)": EventFragment;
    "JoiningFeeChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pulled(uint256)": EventFragment;
    "Repaid(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoiningFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class TrueFiPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TrueFiPoolInterface;

  functions: {
    _currencyToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_currencyToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _curveGauge(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_curveGauge()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _curvePool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_curvePool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _lender(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_lender()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _minter(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_minter()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _uniRouter(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_uniRouter()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    borrow(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(uint256,uint256)"(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calcWithdrawOneCoin(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calcWithdrawOneCoin(uint256)"(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimableFees(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimableFees()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    collectCrv(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectCrv(uint256,address[])"(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectFees(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currencyToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "currencyToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    flush(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flush(uint256,uint256)"(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    join(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joiningFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "joiningFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    poolValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    yTokenBalance(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "yTokenBalance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  _currencyToken(overrides?: CallOverrides): Promise<string>;

  "_currencyToken()"(overrides?: CallOverrides): Promise<string>;

  _curveGauge(overrides?: CallOverrides): Promise<string>;

  "_curveGauge()"(overrides?: CallOverrides): Promise<string>;

  _curvePool(overrides?: CallOverrides): Promise<string>;

  "_curvePool()"(overrides?: CallOverrides): Promise<string>;

  _lender(overrides?: CallOverrides): Promise<string>;

  "_lender()"(overrides?: CallOverrides): Promise<string>;

  _minter(overrides?: CallOverrides): Promise<string>;

  "_minter()"(overrides?: CallOverrides): Promise<string>;

  _uniRouter(overrides?: CallOverrides): Promise<string>;

  "_uniRouter()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    expectedAmount: BigNumberish,
    amountWithoutFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(uint256,uint256)"(
    expectedAmount: BigNumberish,
    amountWithoutFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calcTokenAmount(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcTokenAmount(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcWithdrawOneCoin(
    yAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcWithdrawOneCoin(uint256)"(
    yAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

  "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  collectCrv(
    amountOutMin: BigNumberish,
    path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectCrv(uint256,address[])"(
    amountOutMin: BigNumberish,
    path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectFees(
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectFees(address)"(
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  "currencyToken()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  flush(
    currencyAmount: BigNumberish,
    minMintAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flush(uint256,uint256)"(
    currencyAmount: BigNumberish,
    minMintAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    __curvePool: string,
    __curveGauge: string,
    __currencyToken: string,
    __lender: string,
    __uniRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    __curvePool: string,
    __curveGauge: string,
    __currencyToken: string,
    __lender: string,
    __uniRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  join(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "join(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

  "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolValue(overrides?: CallOverrides): Promise<BigNumber>;

  "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  pull(
    yAmount: BigNumberish,
    minCurrencyAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pull(uint256,uint256)"(
    yAmount: BigNumberish,
    minCurrencyAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  repay(
    currencyAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repay(uint256)"(
    currencyAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setJoiningFee(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setJoiningFee(uint256)"(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _currencyToken(overrides?: CallOverrides): Promise<string>;

    "_currencyToken()"(overrides?: CallOverrides): Promise<string>;

    _curveGauge(overrides?: CallOverrides): Promise<string>;

    "_curveGauge()"(overrides?: CallOverrides): Promise<string>;

    _curvePool(overrides?: CallOverrides): Promise<string>;

    "_curvePool()"(overrides?: CallOverrides): Promise<string>;

    _lender(overrides?: CallOverrides): Promise<string>;

    "_lender()"(overrides?: CallOverrides): Promise<string>;

    _minter(overrides?: CallOverrides): Promise<string>;

    "_minter()"(overrides?: CallOverrides): Promise<string>;

    _uniRouter(overrides?: CallOverrides): Promise<string>;

    "_uniRouter()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(uint256,uint256)"(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWithdrawOneCoin(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcWithdrawOneCoin(uint256)"(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectCrv(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "collectCrv(uint256,address[])"(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    collectFees(beneficiary: string, overrides?: CallOverrides): Promise<void>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    "currencyToken()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flush(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flush(uint256,uint256)"(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    join(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setJoiningFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Borrow(borrower: null, amount: null, fee: null): EventFilter;

    Collected(beneficiary: string | null, amount: null): EventFilter;

    Exited(staker: string | null, amount: null): EventFilter;

    Flushed(currencyAmount: null): EventFilter;

    Joined(staker: string | null, deposited: null, minted: null): EventFilter;

    JoiningFeeChanged(newFee: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Pulled(yAmount: null): EventFilter;

    Repaid(payer: string | null, amount: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    _currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_currencyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _curveGauge(overrides?: CallOverrides): Promise<BigNumber>;

    "_curveGauge()"(overrides?: CallOverrides): Promise<BigNumber>;

    _curvePool(overrides?: CallOverrides): Promise<BigNumber>;

    "_curvePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    _lender(overrides?: CallOverrides): Promise<BigNumber>;

    "_lender()"(overrides?: CallOverrides): Promise<BigNumber>;

    _minter(overrides?: CallOverrides): Promise<BigNumber>;

    "_minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    _uniRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "_uniRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(uint256,uint256)"(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWithdrawOneCoin(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcWithdrawOneCoin(uint256)"(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    "claimableFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectCrv(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectCrv(uint256,address[])"(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectFees(beneficiary: string, overrides?: Overrides): Promise<BigNumber>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    flush(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flush(uint256,uint256)"(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    join(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "joiningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "poolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setJoiningFee(fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    yTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_currencyToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _curveGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_curveGauge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _curvePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_curvePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_lender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_uniRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,uint256)"(
      expectedAmount: BigNumberish,
      amountWithoutFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calcTokenAmount(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokenAmount(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcWithdrawOneCoin(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcWithdrawOneCoin(uint256)"(
      yAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimableFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectCrv(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectCrv(uint256,address[])"(
      amountOutMin: BigNumberish,
      path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectFees(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectFees(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    flush(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flush(uint256,uint256)"(
      currencyAmount: BigNumberish,
      minMintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      __curvePool: string,
      __curveGauge: string,
      __currencyToken: string,
      __lender: string,
      __uniRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    join(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "join(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "joiningFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pull(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pull(uint256,uint256)"(
      yAmount: BigNumberish,
      minCurrencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    repay(
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repay(uint256)"(
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setJoiningFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setJoiningFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    yTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yTokenBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
