/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockTrueLenderInterface extends ethers.utils.Interface {
  functions: {
    "allow(address,bool)": FunctionFragment;
    "allowedBorrowers(address)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "distribute(address,uint256,uint256)": FunctionFragment;
    "fund(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "loanIsAttractiveEnough(uint256)": FunctionFragment;
    "loanIsCredible(uint256,uint256,uint256,uint256)": FunctionFragment;
    "loanSizeWithinBounds(uint256)": FunctionFragment;
    "loanTermWithinBounds(uint256)": FunctionFragment;
    "loans()": FunctionFragment;
    "maxApy()": FunctionFragment;
    "maxSize()": FunctionFragment;
    "maxTerm()": FunctionFragment;
    "minApy()": FunctionFragment;
    "minSize()": FunctionFragment;
    "minTerm()": FunctionFragment;
    "owner()": FunctionFragment;
    "participationFactor()": FunctionFragment;
    "pool()": FunctionFragment;
    "ratingAgency()": FunctionFragment;
    "reclaim(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "riskAversion()": FunctionFragment;
    "setApyLimits(uint256,uint256)": FunctionFragment;
    "setParticipationFactor(uint256)": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "setRiskAversion(uint256)": FunctionFragment;
    "setSizeLimits(uint256,uint256)": FunctionFragment;
    "setTermLimits(uint256,uint256)": FunctionFragment;
    "setVotingPeriod(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "value()": FunctionFragment;
    "votesThresholdReached(uint256,uint256)": FunctionFragment;
    "votingLastedLongEnough(uint256)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allow",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedBorrowers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fund", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIsAttractiveEnough",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIsCredible",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanSizeWithinBounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanTermWithinBounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loans", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxApy", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxTerm", values?: undefined): string;
  encodeFunctionData(functionFragment: "minApy", values?: undefined): string;
  encodeFunctionData(functionFragment: "minSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "minTerm", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participationFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ratingAgency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reclaim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskAversion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApyLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipationFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRiskAversion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSizeLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTermLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votesThresholdReached",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingLastedLongEnough",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanIsAttractiveEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIsCredible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanSizeWithinBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanTermWithinBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxApy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxTerm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minApy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minTerm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ratingAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reclaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskAversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApyLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRiskAversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSizeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTermLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesThresholdReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingLastedLongEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "Allowed(address,bool)": EventFragment;
    "ApyLimitsChanged(uint256,uint256)": EventFragment;
    "Funded(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParticipationFactorChanged(uint256)": EventFragment;
    "Reclaimed(address,uint256)": EventFragment;
    "RiskAversionChanged(uint256)": EventFragment;
    "SizeLimitsChanged(uint256,uint256)": EventFragment;
    "TermLimitsChanged(uint256,uint256)": EventFragment;
    "VotingPeriodChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApyLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParticipationFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskAversionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SizeLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TermLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodChanged"): EventFragment;
}

export class MockTrueLender extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockTrueLenderInterface;

  functions: {
    allow(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowedBorrowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    currencyToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "currencyToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fund(
      loanToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fund(address)"(
      loanToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _pool: string,
      _ratingAgency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    loanIsCredible(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "loanIsCredible(uint256,uint256,uint256,uint256)"(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    loans(
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "loans()"(
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    maxApy(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxApy()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxSize(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxSize()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxTerm(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxTerm()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minApy(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minApy()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minSize(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minSize()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minTerm(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minTerm()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    participationFactor(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "participationFactor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ratingAgency(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ratingAgency()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reclaim(
      loanToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    riskAversion(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "riskAversion()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParticipationFactor(
      newParticipationFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParticipationFactor(uint256)"(
      newParticipationFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPool(
      newPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPool(address)"(
      newPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRiskAversion(
      newRiskAversion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRiskAversion(uint256)"(
      newRiskAversion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    value(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "value()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    votesThresholdReached(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "votesThresholdReached(uint256,uint256)"(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    votingPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votingPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  allow(
    who: string,
    status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allow(address,bool)"(
    who: string,
    status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowedBorrowers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "allowedBorrowers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  "currencyToken()"(overrides?: CallOverrides): Promise<string>;

  distribute(
    recipient: string,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distribute(address,uint256,uint256)"(
    recipient: string,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fund(loanToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  "fund(address)"(
    loanToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _pool: string,
    _ratingAgency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _pool: string,
    _ratingAgency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  loanIsAttractiveEnough(
    apy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanIsAttractiveEnough(uint256)"(
    apy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanIsCredible(
    apy: BigNumberish,
    term: BigNumberish,
    yesVotes: BigNumberish,
    noVotes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanIsCredible(uint256,uint256,uint256,uint256)"(
    apy: BigNumberish,
    term: BigNumberish,
    yesVotes: BigNumberish,
    noVotes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanSizeWithinBounds(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanSizeWithinBounds(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanTermWithinBounds(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanTermWithinBounds(uint256)"(
    term: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loans(overrides?: CallOverrides): Promise<string[]>;

  "loans()"(overrides?: CallOverrides): Promise<string[]>;

  maxApy(overrides?: CallOverrides): Promise<BigNumber>;

  "maxApy()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxSize(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTerm(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

  minApy(overrides?: CallOverrides): Promise<BigNumber>;

  "minApy()"(overrides?: CallOverrides): Promise<BigNumber>;

  minSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  minTerm(overrides?: CallOverrides): Promise<BigNumber>;

  "minTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  participationFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "participationFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  ratingAgency(overrides?: CallOverrides): Promise<string>;

  "ratingAgency()"(overrides?: CallOverrides): Promise<string>;

  reclaim(
    loanToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reclaim(address)"(
    loanToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  riskAversion(overrides?: CallOverrides): Promise<BigNumber>;

  "riskAversion()"(overrides?: CallOverrides): Promise<BigNumber>;

  setApyLimits(
    newMinApy: BigNumberish,
    newMaxApy: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApyLimits(uint256,uint256)"(
    newMinApy: BigNumberish,
    newMaxApy: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParticipationFactor(
    newParticipationFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParticipationFactor(uint256)"(
    newParticipationFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPool(newPool: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setPool(address)"(
    newPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRiskAversion(
    newRiskAversion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRiskAversion(uint256)"(
    newRiskAversion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSizeLimits(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSizeLimits(uint256,uint256)"(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTermLimits(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTermLimits(uint256,uint256)"(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVotingPeriod(
    newVotingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVotingPeriod(uint256)"(
    newVotingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  "value()"(overrides?: CallOverrides): Promise<BigNumber>;

  votesThresholdReached(
    amount: BigNumberish,
    yesVotes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "votesThresholdReached(uint256,uint256)"(
    amount: BigNumberish,
    yesVotes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votingLastedLongEnough(
    start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "votingLastedLongEnough(uint256)"(
    start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allow(
      who: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedBorrowers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    "currencyToken()"(overrides?: CallOverrides): Promise<string>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(loanToken: string, overrides?: CallOverrides): Promise<void>;

    "fund(address)"(
      loanToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _pool: string,
      _ratingAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanIsCredible(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanIsCredible(uint256,uint256,uint256,uint256)"(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loans(overrides?: CallOverrides): Promise<string[]>;

    "loans()"(overrides?: CallOverrides): Promise<string[]>;

    maxApy(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApy(overrides?: CallOverrides): Promise<BigNumber>;

    "minApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    minSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "minTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    participationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "participationFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    ratingAgency(overrides?: CallOverrides): Promise<string>;

    "ratingAgency()"(overrides?: CallOverrides): Promise<string>;

    reclaim(loanToken: string, overrides?: CallOverrides): Promise<void>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    riskAversion(overrides?: CallOverrides): Promise<BigNumber>;

    "riskAversion()"(overrides?: CallOverrides): Promise<BigNumber>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParticipationFactor(
      newParticipationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParticipationFactor(uint256)"(
      newParticipationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(newPool: string, overrides?: CallOverrides): Promise<void>;

    "setPool(address)"(
      newPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskAversion(
      newRiskAversion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRiskAversion(uint256)"(
      newRiskAversion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;

    votesThresholdReached(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "votesThresholdReached(uint256,uint256)"(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Allowed(who: string | null, status: null): EventFilter;

    ApyLimitsChanged(minApy: null, maxApy: null): EventFilter;

    Funded(loanToken: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ParticipationFactorChanged(participationFactor: null): EventFilter;

    Reclaimed(loanToken: string | null, amount: null): EventFilter;

    RiskAversionChanged(riskAversion: null): EventFilter;

    SizeLimitsChanged(minSize: null, maxSize: null): EventFilter;

    TermLimitsChanged(minTerm: null, maxTerm: null): EventFilter;

    VotingPeriodChanged(votingPeriod: null): EventFilter;
  };

  estimateGas: {
    allow(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowedBorrowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fund(loanToken: string, overrides?: Overrides): Promise<BigNumber>;

    "fund(address)"(
      loanToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _pool: string,
      _ratingAgency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanIsCredible(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanIsCredible(uint256,uint256,uint256,uint256)"(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(overrides?: CallOverrides): Promise<BigNumber>;

    "loans()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxApy(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApy(overrides?: CallOverrides): Promise<BigNumber>;

    "minApy()"(overrides?: CallOverrides): Promise<BigNumber>;

    minSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTerm(overrides?: CallOverrides): Promise<BigNumber>;

    "minTerm()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    participationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "participationFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratingAgency(overrides?: CallOverrides): Promise<BigNumber>;

    "ratingAgency()"(overrides?: CallOverrides): Promise<BigNumber>;

    reclaim(loanToken: string, overrides?: Overrides): Promise<BigNumber>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    riskAversion(overrides?: CallOverrides): Promise<BigNumber>;

    "riskAversion()"(overrides?: CallOverrides): Promise<BigNumber>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParticipationFactor(
      newParticipationFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParticipationFactor(uint256)"(
      newParticipationFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPool(newPool: string, overrides?: Overrides): Promise<BigNumber>;

    "setPool(address)"(
      newPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRiskAversion(
      newRiskAversion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRiskAversion(uint256)"(
      newRiskAversion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    "value()"(overrides?: CallOverrides): Promise<BigNumber>;

    votesThresholdReached(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "votesThresholdReached(uint256,uint256)"(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allow(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowedBorrowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedBorrowers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distribute(address,uint256,uint256)"(
      recipient: string,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fund(
      loanToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fund(address)"(
      loanToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _pool: string,
      _ratingAgency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _pool: string,
      _ratingAgency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    loanIsAttractiveEnough(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanIsAttractiveEnough(uint256)"(
      apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanIsCredible(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanIsCredible(uint256,uint256,uint256,uint256)"(
      apy: BigNumberish,
      term: BigNumberish,
      yesVotes: BigNumberish,
      noVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanSizeWithinBounds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanSizeWithinBounds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanTermWithinBounds(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanTermWithinBounds(uint256)"(
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loans()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxApy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxApy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTerm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minApy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minApy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minTerm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participationFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participationFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratingAgency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ratingAgency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaim(
      loanToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reclaim(address)"(
      loanToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    riskAversion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "riskAversion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApyLimits(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApyLimits(uint256,uint256)"(
      newMinApy: BigNumberish,
      newMaxApy: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParticipationFactor(
      newParticipationFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParticipationFactor(uint256)"(
      newParticipationFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPool(
      newPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(address)"(
      newPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRiskAversion(
      newRiskAversion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRiskAversion(uint256)"(
      newRiskAversion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSizeLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSizeLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTermLimits(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTermLimits(uint256,uint256)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "value()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votesThresholdReached(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votesThresholdReached(uint256,uint256)"(
      amount: BigNumberish,
      yesVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingLastedLongEnough(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votingLastedLongEnough(uint256)"(
      start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
