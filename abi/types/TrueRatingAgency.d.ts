/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TrueRatingAgencyInterface extends ethers.utils.Interface {
  functions: {
    "allow(address,bool)": FunctionFragment;
    "allowedSubmitters(address)": FunctionFragment;
    "burnFactor()": FunctionFragment;
    "claim(address,address)": FunctionFragment;
    "distributor()": FunctionFragment;
    "factory()": FunctionFragment;
    "getNoVote(address,address)": FunctionFragment;
    "getResults(address)": FunctionFragment;
    "getTotalNoVotes(address)": FunctionFragment;
    "getTotalYesVotes(address)": FunctionFragment;
    "getVotingStart(address)": FunctionFragment;
    "getYesVote(address,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "loans(address)": FunctionFragment;
    "lossFactor()": FunctionFragment;
    "no(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retract(address)": FunctionFragment;
    "setBurnFactor(uint256)": FunctionFragment;
    "setLossFactor(uint256)": FunctionFragment;
    "status(address)": FunctionFragment;
    "submit(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustToken()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "yes(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allow",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedSubmitters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNoVote",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getResults", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalNoVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalYesVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStart",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYesVote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lossFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "no",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "retract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBurnFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLossFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "status", values: [string]): string;
  encodeFunctionData(functionFragment: "submit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yes",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedSubmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNoVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNoVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalYesVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getYesVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lossFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "no", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "retract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLossFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yes", data: BytesLike): Result;

  events: {
    "Allowed(address,bool)": EventFragment;
    "BurnFactorChanged(uint256)": EventFragment;
    "LoanRetracted(address)": EventFragment;
    "LoanSubmitted(address)": EventFragment;
    "LossFactorChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Voted(address,address,bool,uint256)": EventFragment;
    "Withdrawn(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRetracted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LossFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class TrueRatingAgency extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TrueRatingAgencyInterface;

  functions: {
    allow(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowedSubmitters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "allowedSubmitters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    burnFactor(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "burnFactor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claim(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "distributor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    factory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "factory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getNoVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNoVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getTotalNoVotes(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalNoVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalYesVotes(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalYesVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVotingStart(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getYesVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getYesVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    initialize(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      timestamp: BigNumber;
      reward: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      timestamp: BigNumber;
      reward: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    lossFactor(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lossFactor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    retract(id: string, overrides?: Overrides): Promise<ContractTransaction>;

    "retract(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBurnFactor(
      newBurnFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBurnFactor(uint256)"(
      newBurnFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLossFactor(
      newLossFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLossFactor(uint256)"(
      newLossFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    status(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "status(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    submit(id: string, overrides?: Overrides): Promise<ContractTransaction>;

    "submit(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "trustToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allow(
    who: string,
    status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allow(address,bool)"(
    who: string,
    status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowedSubmitters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "allowedSubmitters(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  burnFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "burnFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    id: string,
    voter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address,address)"(
    id: string,
    voter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  "distributor()"(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getNoVote(
    id: string,
    voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNoVote(address,address)"(
    id: string,
    voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getResults(
    id: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getResults(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getTotalNoVotes(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalNoVotes(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalYesVotes(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalYesVotes(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingStart(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getVotingStart(address)"(
    id: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYesVote(
    id: string,
    voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getYesVote(address,address)"(
    id: string,
    voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _trustToken: string,
    _distributor: string,
    _factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _trustToken: string,
    _distributor: string,
    _factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  loans(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    timestamp: BigNumber;
    reward: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "loans(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    timestamp: BigNumber;
    reward: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  lossFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "lossFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  no(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "no(address,uint256)"(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  retract(id: string, overrides?: Overrides): Promise<ContractTransaction>;

  "retract(address)"(
    id: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBurnFactor(
    newBurnFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBurnFactor(uint256)"(
    newBurnFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLossFactor(
    newLossFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLossFactor(uint256)"(
    newLossFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  status(id: string, overrides?: CallOverrides): Promise<number>;

  "status(address)"(id: string, overrides?: CallOverrides): Promise<number>;

  submit(id: string, overrides?: Overrides): Promise<ContractTransaction>;

  "submit(address)"(
    id: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustToken(overrides?: CallOverrides): Promise<string>;

  "trustToken()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  yes(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "yes(address,uint256)"(
    id: string,
    stake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allow(
      who: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedSubmitters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowedSubmitters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burnFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "burnFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(id: string, voter: string, overrides?: CallOverrides): Promise<void>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    distributor(overrides?: CallOverrides): Promise<string>;

    "distributor()"(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getNoVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNoVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getTotalNoVotes(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalNoVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalYesVotes(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalYesVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingStart(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYesVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYesVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      timestamp: BigNumber;
      reward: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      timestamp: BigNumber;
      reward: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    lossFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "lossFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    retract(id: string, overrides?: CallOverrides): Promise<void>;

    "retract(address)"(id: string, overrides?: CallOverrides): Promise<void>;

    setBurnFactor(
      newBurnFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBurnFactor(uint256)"(
      newBurnFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLossFactor(
      newLossFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLossFactor(uint256)"(
      newLossFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    status(id: string, overrides?: CallOverrides): Promise<number>;

    "status(address)"(id: string, overrides?: CallOverrides): Promise<number>;

    submit(id: string, overrides?: CallOverrides): Promise<void>;

    "submit(address)"(id: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustToken(overrides?: CallOverrides): Promise<string>;

    "trustToken()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Allowed(who: string | null, status: null): EventFilter;

    BurnFactorChanged(burnFactor: null): EventFilter;

    LoanRetracted(id: null): EventFilter;

    LoanSubmitted(id: null): EventFilter;

    LossFactorChanged(lossFactor: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Voted(loanToken: null, voter: null, choice: null, stake: null): EventFilter;

    Withdrawn(
      loanToken: null,
      voter: null,
      stake: null,
      received: null,
      burned: null
    ): EventFilter;
  };

  estimateGas: {
    allow(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowedSubmitters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedSubmitters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "burnFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(id: string, voter: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    "distributor()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNoVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNoVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResults(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalNoVotes(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalNoVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalYesVotes(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalYesVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingStart(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYesVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYesVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    loans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lossFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "lossFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    retract(id: string, overrides?: Overrides): Promise<BigNumber>;

    "retract(address)"(id: string, overrides?: Overrides): Promise<BigNumber>;

    setBurnFactor(
      newBurnFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBurnFactor(uint256)"(
      newBurnFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLossFactor(
      newLossFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLossFactor(uint256)"(
      newLossFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    status(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    "status(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submit(id: string, overrides?: Overrides): Promise<BigNumber>;

    "submit(address)"(id: string, overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustToken(overrides?: CallOverrides): Promise<BigNumber>;

    "trustToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allow(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allow(address,bool)"(
      who: string,
      status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowedSubmitters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedSubmitters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burnFactor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address,address)"(
      id: string,
      voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "distributor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNoVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNoVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResults(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResults(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalNoVotes(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalNoVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalYesVotes(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalYesVotes(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingStart(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotingStart(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYesVote(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getYesVote(address,address)"(
      id: string,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _trustToken: string,
      _distributor: string,
      _factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lossFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lossFactor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    no(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "no(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    retract(id: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "retract(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBurnFactor(
      newBurnFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBurnFactor(uint256)"(
      newBurnFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLossFactor(
      newLossFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLossFactor(uint256)"(
      newLossFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    status(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "status(address)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submit(id: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "submit(address)"(
      id: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    yes(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "yes(address,uint256)"(
      id: string,
      stake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
