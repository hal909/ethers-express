/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LoanTokenInterface extends ethers.utils.Interface {
  functions: {
    "allowTransfer(address,bool)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "amount()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "apy()": FunctionFragment;
    "balance()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrower()": FunctionFragment;
    "borrowerFee()": FunctionFragment;
    "canTransfer(address)": FunctionFragment;
    "close()": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "debt()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "fund()": FunctionFragment;
    "getParameters()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isLoanToken()": FunctionFragment;
    "lender()": FunctionFragment;
    "name()": FunctionFragment;
    "profit()": FunctionFragment;
    "receivedAmount()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemed()": FunctionFragment;
    "repaid()": FunctionFragment;
    "repay(address,uint256)": FunctionFragment;
    "start()": FunctionFragment;
    "status()": FunctionFragment;
    "symbol()": FunctionFragment;
    "term()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "value(uint256)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowTransfer",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "apy", values?: undefined): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowerFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canTransfer", values: [string]): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLoanToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "profit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "redeemed", values?: undefined): string;
  encodeFunctionData(functionFragment: "repaid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "term", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "value", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "allowTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLoanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "term", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Closed(uint8,uint256)": EventFragment;
    "Funded(address)": EventFragment;
    "Redeemed(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferAllowanceChanged(address,bool)": EventFragment;
    "Withdrawn(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferAllowanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class LoanToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LoanTokenInterface;

  functions: {
    allowTransfer(
      account: string,
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowTransfer(address,bool)"(
      account: string,
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    amount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "amount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    apy(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "apy()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balance(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    borrower(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "borrower()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    borrowerFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "borrowerFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    canTransfer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canTransfer(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    close(overrides?: Overrides): Promise<ContractTransaction>;

    "close()"(overrides?: Overrides): Promise<ContractTransaction>;

    currencyToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "currencyToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    debt(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "debt()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fund(overrides?: Overrides): Promise<ContractTransaction>;

    "fund()"(overrides?: Overrides): Promise<ContractTransaction>;

    getParameters(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getParameters()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isLoanToken(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isLoanToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lender(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lender()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    profit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "profit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    receivedAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "receivedAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemed(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "redeemed()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    repaid(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "repaid()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    repay(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repay(address,uint256)"(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    start(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "start()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    status(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "status()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    term(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "term()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    value(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "value(uint256)"(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowTransfer(
    account: string,
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowTransfer(address,bool)"(
    account: string,
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  apy(overrides?: CallOverrides): Promise<BigNumber>;

  "apy()"(overrides?: CallOverrides): Promise<BigNumber>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrower(overrides?: CallOverrides): Promise<string>;

  "borrower()"(overrides?: CallOverrides): Promise<string>;

  borrowerFee(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  canTransfer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "canTransfer(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  close(overrides?: Overrides): Promise<ContractTransaction>;

  "close()"(overrides?: Overrides): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  "currencyToken()"(overrides?: CallOverrides): Promise<string>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fund(overrides?: Overrides): Promise<ContractTransaction>;

  "fund()"(overrides?: Overrides): Promise<ContractTransaction>;

  getParameters(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getParameters()"(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isLoanToken(overrides?: CallOverrides): Promise<boolean>;

  "isLoanToken()"(overrides?: CallOverrides): Promise<boolean>;

  lender(overrides?: CallOverrides): Promise<string>;

  "lender()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  profit(overrides?: CallOverrides): Promise<BigNumber>;

  "profit()"(overrides?: CallOverrides): Promise<BigNumber>;

  receivedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "receivedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemed(overrides?: CallOverrides): Promise<BigNumber>;

  "redeemed()"(overrides?: CallOverrides): Promise<BigNumber>;

  repaid(overrides?: CallOverrides): Promise<BigNumber>;

  "repaid()"(overrides?: CallOverrides): Promise<BigNumber>;

  repay(
    _sender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repay(address,uint256)"(
    _sender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  "start()"(overrides?: CallOverrides): Promise<BigNumber>;

  status(overrides?: CallOverrides): Promise<number>;

  "status()"(overrides?: CallOverrides): Promise<number>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  term(overrides?: CallOverrides): Promise<BigNumber>;

  "term()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  value(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "value(uint256)"(
    _balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address)"(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowTransfer(
      account: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowTransfer(address,bool)"(
      account: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    apy(overrides?: CallOverrides): Promise<BigNumber>;

    "apy()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<string>;

    "borrower()"(overrides?: CallOverrides): Promise<string>;

    borrowerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    canTransfer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "canTransfer(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    close(overrides?: CallOverrides): Promise<void>;

    "close()"(overrides?: CallOverrides): Promise<void>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    "currencyToken()"(overrides?: CallOverrides): Promise<string>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fund(overrides?: CallOverrides): Promise<void>;

    "fund()"(overrides?: CallOverrides): Promise<void>;

    getParameters(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getParameters()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLoanToken(overrides?: CallOverrides): Promise<boolean>;

    "isLoanToken()"(overrides?: CallOverrides): Promise<boolean>;

    lender(overrides?: CallOverrides): Promise<string>;

    "lender()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    profit(overrides?: CallOverrides): Promise<BigNumber>;

    "profit()"(overrides?: CallOverrides): Promise<BigNumber>;

    receivedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "receivedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "redeem(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemed(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemed()"(overrides?: CallOverrides): Promise<BigNumber>;

    repaid(overrides?: CallOverrides): Promise<BigNumber>;

    "repaid()"(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      _sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(address,uint256)"(
      _sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    "start()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<number>;

    "status()"(overrides?: CallOverrides): Promise<number>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    term(overrides?: CallOverrides): Promise<BigNumber>;

    "term()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    value(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "value(uint256)"(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(_beneficiary: string, overrides?: CallOverrides): Promise<void>;

    "withdraw(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Closed(status: null, returnedAmount: null): EventFilter;

    Funded(lender: null): EventFilter;

    Redeemed(
      receiver: null,
      burnedAmount: null,
      redeemedAmound: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    TransferAllowanceChanged(account: null, status: null): EventFilter;

    Withdrawn(beneficiary: null): EventFilter;
  };

  estimateGas: {
    allowTransfer(
      account: string,
      _status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allowTransfer(address,bool)"(
      account: string,
      _status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    apy(overrides?: CallOverrides): Promise<BigNumber>;

    "apy()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    "borrower()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    canTransfer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "canTransfer(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(overrides?: Overrides): Promise<BigNumber>;

    "close()"(overrides?: Overrides): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "currencyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fund(overrides?: Overrides): Promise<BigNumber>;

    "fund()"(overrides?: Overrides): Promise<BigNumber>;

    getParameters(overrides?: CallOverrides): Promise<BigNumber>;

    "getParameters()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isLoanToken(overrides?: CallOverrides): Promise<BigNumber>;

    "isLoanToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    "lender()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    profit(overrides?: CallOverrides): Promise<BigNumber>;

    "profit()"(overrides?: CallOverrides): Promise<BigNumber>;

    receivedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "receivedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "redeem(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemed(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemed()"(overrides?: CallOverrides): Promise<BigNumber>;

    repaid(overrides?: CallOverrides): Promise<BigNumber>;

    "repaid()"(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repay(address,uint256)"(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    "start()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    "status()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    term(overrides?: CallOverrides): Promise<BigNumber>;

    "term()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    value(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "value(uint256)"(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(_beneficiary: string, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowTransfer(
      account: string,
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowTransfer(address,bool)"(
      account: string,
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "amount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    apy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "apy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrower()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowerFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canTransfer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canTransfer(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(overrides?: Overrides): Promise<PopulatedTransaction>;

    "close()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currencyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fund(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fund()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getParameters()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isLoanToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isLoanToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "profit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "receivedAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeemed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "repaid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repay(address,uint256)"(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "start()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "status()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    term(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "term()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    value(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "value(uint256)"(
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
